<!DOCTYPE refentry PUBLIC 
   "-//OASIS//DTD DocBook XML V4.1.2//EN"
   "docbook/docbookx.dtd">
<refentry id='comparator.1'>
<refmeta>
<refentrytitle>comparator</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class='date'>Sept 1 2003</refmiscinfo>
</refmeta>
<refnamediv id='name'>
<refname>comparator</refname>
<refname>filterator</refname>
<refpurpose>fast location of common code in large source trees</refpurpose>
</refnamediv>
<refsynopsisdiv id='synopsis'>

<cmdsynopsis>
  <command>comparator</command>
  <arg choice='opt'>-c</arg>
  <arg choice='opt'>-C</arg>
  <arg choice='opt'>-d <replaceable>dir</replaceable></arg>
  <arg choice='opt'>-m <replaceable>minsize</replaceable></arg>
  <arg choice='opt'>-n</arg>
  <arg choice='opt'>-N <replaceable>normalization-spec</replaceable></arg>
  <arg choice='opt'>-o <replaceable>file</replaceable></arg>
  <arg choice='opt'>-r</arg>
  <arg choice='opt'>-s <replaceable>shredsize</replaceable></arg>
  <arg choice='opt'>-v</arg>
  <arg choice='opt'>-w</arg>
  <arg choice='opt'>-x</arg>
  <arg choice='plain' rep='repeat'>path</arg>
  <sbr/>
  <command>filterator</command>
  <arg choice='opt'>-d <replaceable>dir</replaceable></arg>
  <arg choice='opt'>-m <replaceable>minsize</replaceable></arg>
  <sbr/>
  <command>comparator.py</command>
</cmdsynopsis>

</refsynopsisdiv>

<refsect1 id='description'><title>DESCRIPTION</title>

<para><application>comparator</application> is a program for quickly
finding common sections in two or more source-code trees.  It's named
after a now-obsolete astronomical instrument called a blink comparator
that was used to find moving objects in starfield photos.  These
reports tend to be noisy; <application>filterator</application> is a
postprocessor for <application>comparator</application> reports that
can apply significance
filtering. <application>comparator.py</application> is a Python module
for interpreting <application>comparator</application> reports;
<application>filterator</application> uses it.</para>

<refsect2><title>How comparator works</title>

<para><application>comparator</application> works by first chopping
the specified trees into overlapping shreds (by default 3 lines long)
and computing a hash of each shred.  The resulting list of
shreds is examined and all unique hashes are thrown out.  Then
<application>comparator</application> generates a report listing all
cliques of lines with duplicate hashes, with overlapping ranges
merged. The output format can (not by coincidence) be stepped through
with the next-error function of Emacs.</para>

<para>A consequence of the method is that
<application>comparator</application> will find common code segments
wherever they are.  It is insensitive to rearrangements of the source
trees.  With appropriate options, code can be normalized at input to
ignore differences in whitespace and (in C code) brace placement.  An
option to strip comments also exists</para>

<para>The program is capable of generating a hash list for a source
code tree which can be used in place of the tree itself.  Thus, it is
possible to do comparisons with source trees without having access to
the actual source code, providing someone who has access is willing to
ship you a hash list.  These hash lists are called &lsquo;SCF
files&rsquo; and made with the extension <filename>.scf</filename>;
the name stands for Source Comparison Format.</para>

<para>In its normal mode of operation,
<application>comparator</application> expects two or more command-line
arguments which are the root directories of the source-code trees to
be compared, and generates a report to standard output.  Progress
messages are emitted to standard error.  Some arguments may be the
names of SCF files.</para>

<para>When given a single path argument which is a tree, the program
generates an SCF hash list to standard output.</para>

<para>When the <option>-c</option> option is specified, the program
generates a SCF file from each tree specified on the command
line.  The name of the resulting file is the argument name with
<filename>.scf</filename> appended.</para>

<para>The <option>-o</option> directs output to a specified file. This
may be used with <option>-c</option> to override the normal
<filename>.scf</filename> convention, or simply as an alternative
to ouput redirection when generating a final report.  One advantage
of <option>-o</option> is that the program won't create the output
file until it is ready to write; thus, unlike shell redirects, it
won't leave an empty file lying aeound if it aborts early.</para>

<para>The <option>-d</option> option changes current directory to the
specified tree before walking down each argument path to generate
hashes.  This will be useful if you want to generate a report for
trees in a directory other than your current, but want the filenames
in the report to be relative.</para>

<para>The <option>-s</option> option changes the shred size. Smaller
shred sizes are more sensitive to small code duplications, but produce
correspondingly noisier output.  Larger ones will suppress both noise
and small similarities.</para>

<para>The <option>-m</option> option sets the minimum-sized span
of lines that will be output.  By default this is zero; setting it
to a value higher than the shred size will eliminate a lot of junk
from the report.  These are two separate parameters because shred size
controls how likely common segments are to not get recognized because
of unshared things near them, while minimum span size defines the
smallest features we want to see in the output report.</para>

<para>Normally, <application>comparator</application> performs 
significance filtering before emitting a span into the common-segment
report. The <option>-n</option> suppresses this, emitting all common
spans. See the discussion of significance filtering below.</para>

<para>The option <option>-v</option> enables progress and timing
messages to standard error.</para>

<para>The <option>-x</option> enables some debugging output.  It
is for developers; if you need to understand it, read the code.</para>

<para><application>comparator</application> uses a grotty heuristic
for figuring out which files in a tree are eligible to be compared.
Files with <filename>.c</filename> and <filename>.h</filename>
extensions are always eligible. Files with <filename>.o</filename> or
<filename>~</filename> extensions are always ignored.  CVS, RCS, and
SCCS directories are ignored.  Other files are checked to see if the
percentage of printable characters near the front of the file is above
90%.</para>
</refsect2>

<refsect2><title>Normalization specifications</title>

<para>The <option>-N</option> option passes in its argument as a
normalization specification.  A normalization specification consists
of a comma-separated list of tokens.  The first token names a
normalizer, e.g., a set of rules for transforming code into a
canonical form.  Subsequent tokens (if present) are options to the
normalizer.</para>

<refsect3><title>The line-oriented normalizer</title>

<para>The default normalizer is named by the leading token 
<option>line-oriented</option>.  It has the following options:</para>

<para>The <option>remove-whitespace</option> causes all whitespace in the file
(including blank lines) to be ignored for comparison purposes (line
numbers in the output report will nevertheless be correct).</para>

<para>The <option>remove-braces</option> option strips { and }
characters.  This is recommended for comparing C code; it prevents the
comparison from being fooled by differences in indent style.</para>

<para>The <option>remove_comments</option> option removes comments in
C files, All // comments are removed, but only "winged" /* comments
with the start and end of comment on the same line are ignored; also,
block /* comments are retained, but the beginning /* and ending */ are
ignored, In other files, all # comments are removed.</para>

</refsect3>
</refsect2>

<refsect2><title>Significance filtering</title>

<para>Normally, <application>comparator</application> tries to
throw out common segments that are just noise.  A segment is
considered noise if one of the following conditions holds:</para>

<orderedlist>
<listitem><para>Its file has a .c or .h extension, and the segment
consists entirely of whitespace, punctuation, C keywords, C include
lines, and other things that are not C identifiers, function names, or
user-defined macros.</para></listitem>

<listitem><para>The file has a .sh extension or a #! first line 
directing shell interpretation, and the segment consists entirely 
of shell keywords and punctuation.</para></listitem>
</orderedlist>

<para>Significance filtering can be disabled with the
<option>-n</option> option.</para>
</refsect2>

<refsect2><title>filterator</title>

<para><application>filterator</application> is a postprocessor for the
SCF-B output of <application>comparator</application> that produces an
actual code listing.</para>

<para>The <option>-d</option> acts as it does for
<application>comparator</application>.</para>

<para>The <option>-m</option> option sets the minimum size of overlap
to be reported. Setting this to a slightly larger number than the
<application>comparator</application> shred size is a useful way to
filter out spurious matches; thus, while
<application>comparator</application> defaults to a shred size of 3,
<application>filterator</application> defaults to a minimum size of
5.</para>

<para>The -f option takes a Python regexp as argument and throws out
all cliques for which no assocoated filename matches the regexp.  This
might be useful if you want to see a common-segment report only for
files with a particular extension such as .h or .S.</para>

<para>The -n option suppresses code listing, so that an SCF-B output
is produced instead.  You can use this to filter common-segment
reports with -m and -f options of the tool.</para>

<para>Each <application>filterator</application> line beginning with %
is the filename from which the following common span of lines is displayed 
<application>filterator</application> displays each span of lines,
unnormalized, from the first file in the clique of matches that it can
find and open.</para>

<para>Occasionally the <application>filterator</application> output
looks as through the code has failed to properly merge two or more
overlapping line ranges, When this happens, the ranges have different
match sets; they may overlap in one tree, but not in others.  A clue
to this is the number of matches reported for each range.</para>
</refsect2>

<refsect2><title>comparator.py</title>

<para><application>comparator.py</application> is a Python module that
parses and interprets the format emitted by
<application>comparator</application>.  It can be used to write report
generators.  The <application>filterator</application> program is an
example; it is a trivial wrapper around
<application>comparator.py</application>.</para>

</refsect2>
</refsect1>

<refsect1 id='author'><title>AUTHOR</title> <para>Eric S. Raymond
<email>esr@snark.thyrsus.com</email>.  Ronald Rivest suggested the
custom RXOR hash function used in versions 2.0 and up.  See ESR's home page
at <ulink
url='http://www.catb.org/~esr/'>http://www.catb.org/~esr/</ulink> for
updates and other resources.</para>
</refsect1>

<refsect1 id='bugs'><title>LIMITATIONS</title>

<para><application>comparator</application> does not attempt to do
semantic analysis and catch relatively trivial changes like renaming
of variables, etc.  This is because
<application>comparator</application> is designed not as a tool to
detect plagiarism of ideas (the subject of patent law), but as a tool
to detect copying of the expression of ideas (the subject of copyright
law). Normalizing the code in excessively clever ways would trespass
into the territory of ideas and tend to produce false positives.</para>

<para>The heuristic for eligible files can be fooled, though this
is unlikely.</para>

<para>The use of hashes means there is a very small probability of
false-positive matches between shreds; to be precise, with the default
RXOR hash you can expect the first false positive after accumulating
6,074,000,999 shreds.  For even very large forests, such as
collections of Linux and Unix source trees running into the tens of
millions of lines, you are very unlikely to ever see this.  There is
no possibility of false negatives.</para>

<para>The design of this program accepts some size limits to get high
performance in the typical case.  The RXOR hash function's performance
will degrade, possibly leading to false positives, on shreds of 512
or more characters.  Also, comparison will handle maximum of 65536
lines per file (you will be warned if if this limit is exceeded).  A
full integer line-number range would increase working-set size by
33%.</para>

<para>You will get spurious results if you mix
<filename>.scf</filename> files with different hash methods, shred
sizes or normalizations, or with settings for these that conflict with
the command-line options you have in effect for shredding source-code
trees.  The program does some sanity checking but will not prevent you
from shooting yourself in the foot.</para>

<para>The implementation is O(<emphasis>n</emphasis> log
<emphasis>n</emphasis>) in the size of the code trees and
O(<emphasis>n</emphasis><superscript>2</superscript>) in the number of
common segments.  The code for finding duplicate hashes uses a
brute-force approach that relies on being able to allocate core for
the entire hash list generated during processing.  The results are
almost ridiculously fast on machines with enough core (the author has
observed speeds of up to two million lines of code compared per minute
on a 1.8GHz Intel box), but machines with small memories will thrash
their guts out as the VM subsystem tries to cope.</para>
</refsect1>
</refentry>

